#include<iostream>
#include<algorithm>
using namespace std;
class Node
{
public:
int data=0;
Node* left= NULL;
Node* right=NULL;
};
class BST
{
public:
Node* root = NULL;
void insert(int val)
{
Node* temp = new Node();
temp->data = val;
if(this->root == NULL)
{
this->root = temp;
}
else
{
Node* curr = this->root;
while(true)
{
if(val > curr->data)
{
if(curr->right==NULL)
{
curr->right = temp;
break;
}
curr=curr->right;
}
else
{
if(curr->left==NULL)
{
curr->left= temp;
break;
}
curr=curr->left;
}
}
}
}
void inorder(Node* node)
{
if(node==NULL)
return;
inorder(node->left);
cout<<node->data<<" ";
inorder(node->right);
}
bool search(int val , Node* node)
{
if(node==NULL)
return false ;
bool ans = false;
ans |= search(val ,node->left);
if(node->data==val)
return true;
ans|= search(val , node->right);
return ans;
}
int min(Node* node)
{
if(node->left==NULL)
return node->data;
return min(node->left);
}
int maxV(Node* node)
{
if(node->right==NULL)
return node->data;
return maxV(node->right);
}
int height(Node* node) {
if (node == NULL)
return 0;
int leftHeight = height(node->left);
int rightHeight = height(node->right);
return std::max(leftHeight, rightHeight) + 1;
}
};
int main()
{
BST t;
t.insert(10);
t.insert(1);
t.insert(15);
t.insert(3);
cout<<"Inorder: ";
t.inorder(t.root);
cout<<endl;
cout<<t.search(11 , t.root)<<endl;
cout<<t.min(t.root)<<endl;
cout<<t.maxV(t.root)<<endl;
cout<<t.height(t.root)<<endl;
return 0;
}